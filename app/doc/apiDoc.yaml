openapi: 3.0.0
info:
  version: 1.0.0
  title: Cycling Together
  description: Cycling Together API's documentation
  license:
    name: MIT
servers:
  - url: http://localhost:3000/ #Â Development
  - url: http://localhost:8080/ # Production
paths:
  /bycicles:
    get:
      summary: Retrieve all the bycicles from the database
      tags:
        - Bycicles
      responses:
        "200":
          description: Get all the bycicles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Bycicle"

  /bycicles/get/{id}:
    get:
      summary: Retrieve a bycicle by an ID
      tags:
        - Bycicles
      parameters:
        - name: id
          in: path
          description: The bycicle ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: One bycicle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bycicle"
        "400":
          description: Bad request
          
        "404":
          description: Bycicle not found

  /bycicles/get/{property}/{value}:
    get:
      summary: Retrieve bycicles filtered by property
      tags:
        - Bycicles
      parameters:
        - name: property
          in: path
          description: Any of the bycicle properties
          required: true
          schema:
            type: string
        - name: value
          in: path
          description: Value of the bycicle property
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Bycicles filtered by one property
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bycicle"
        "400":
          description: Invalid property
        "404":
          description: Bycicles with category "x" not found

  /bycicles/register:
    post:
      summary: Register a new bycicle
      tags:
        - Bycicles
      requestBody:
        description: Register a new bycicle model
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bycicle"
            example:
              category: "Mountain Bike"
              brand: "Trek"
              weight: 14.5
              frame: "Aluminum"
              suspension: "Full suspension"
              fork: "RockShox Recon RL"
              wheels: "Bontrager Kovee Comp 23"
              wheelSize: 73
              brakes: "Shimano MT200 hydraulic disc"
              groupSet: "Shimano Deore"
              driveTrain: "1x10 speed"
              frontTravel: "120 mm"
              seatpost: "Bontrager Rhythm Elite"
              price: 39.50

      responses:
        "201":
          description: Bycicle created!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bycicle"
        "400":
          description: Bad request

  /bycicles/update/{id}:
    put:
      summary: Update an existing bycicle
      tags:
        - Bycicles
      parameters:
        - name: id
          in: path
          description: The bycicle ID
          required: true
          schema:
            type: string
      requestBody:
        description: Register a new bycicle, you have to indicate to which store does it belong
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bycicle"
            example:
              category: "Updated Bike"
              brand: "Updated Trek"
              weight: 14.5
              frame: "Aluminum"
              suspension: "Full suspension"
              fork: "RockShox Recon RL"
              wheels: "Bontrager Kovee Comp 23"
              wheelSize: 73
              brakes: "Shimano MT200 hydraulic disc"
              groupSet: "Shimano Deore"
              driveTrain: "1x10 speed"
              frontTravel: "120 mm"
              seatpost: "Bontrager Rhythm Elite"
              storeId: 1

      responses:
        "200":
          description: Bycicle updated!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bycicle"
        "400":
          description: Bad request

  /bycicles/delete/one/{id}:
    delete:
      summary: Delete a bycicle by an ID
      tags:
        - Bycicles
      parameters:
        - name: id
          in: path
          description: The bycicle ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Message telling that the bycicle with the requested id has been deleted
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad request
        "404":
          description: Bycicle not found

  /bycicles/delete/all:
    delete:
      summary: Delete all the bycicles
      tags:
        - Bycicles
      responses:
        "204":
          description: Message telling how many bycicles were deleted
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad request
        "404":
          description: Bycicle not found

  /stores:
    get:
      summary: Retrieve all the stores
      tags:
        - Stores
      responses:
        "200":
          description: All the stores
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store"
        "404":
          description: Stores not found
  
  /stores/get/{id}: 
    get:
      summary: Retrieve a store by an ID
      tags:
        - Stores
      parameters:
        - name: id
          in: path
          description: The store ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Store with the requested ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store"
        "400":
          description: Bad request
        "404":
          description: Store not found
  
  /stores/register:
    post:
      summary: Register a new store
      tags:
        - Stores
      requestBody:
        description: Register a new store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Store"
            example:
              storeName: "Felt"
              address: "First Street 15"
              city: "LA"
              country: "USA"
              phoneNumber: "123456789"
              email: "info@felt.com"
              website: "null"
      responses:
        "201":
          description: Store created!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store"
        "400":
          description: Bad request
  
  /stores/update/{id}:
    put:
      summary: Update an existing store
      tags:
        - Stores
      parameters:
        - name: id
          in: path
          description: The store ID
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/componentsschemas/Store"
            example:
              storeName: "Felt"
              address: "First Street 15"
              city: "LA"
              country: "USA"
              phone: "123456789"
              email: "info@felt.com"
              website: "https://felt.com"
      responses:
        "200":
          description: Store updated!
          content:
            application/json:
              schema:
                $ref: "#/componentsschemas/Store"
        "400":
          description: Bad request
  
  /stores/delete/one/{id}:
    delete:
      summary: Delete a store by an ID
      tags:
        - Stores
      parameters:
        - name: id
          in: path
          description: The store ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Message telling that the store with the requested id has been deleted
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad request
        "404":
          description: Store not found
  
  /stores/delete/all:
    delete:
      summary: Delete all the stores
      tags:
        - Stores
      responses:
        "204":
          description: Message telling how many stores were deleted
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad request
        "404":
          description: Store not found
  
  /availability:
    get:
      summary: Get all the availabilities of the bikes of all the stores
      tags:
        - Availability
      
      responses:
        "200":
          description: Returns all the availabilities
          content:
            application/json:
              schema:
                type: string
        
        "404":
          description: There's no availability

  /availability/{bycicleId}/{storeId}:
    get:
      summary: Get a certain availability
      tags:
        - Availability
      parameters:
        - name: bycicleId
          in: path
          description: The bycicle ID
          required: true
          schema:
            type: string

        - name: storeId
          in: path
          description: The store ID
          required: true
          schema:
            type: string

      responses:
        "200":
          description: Returns the availability
          content:
            application/json:
              schema:
                type: string
        
        "400":
          description: Bad request (ID is not a number)

        "404":
          description: There's no availability

    delete:
      summary: Delete a certain availability
      tags:
        - Availability

      parameters:
        - name: bycicleId
          in: path
          description: The bycicle ID
          required: true
          schema:
            type: string

        - name: storeId
          in: path
          description: The store ID
          required: true
          schema:
            type: string

      responses:
        "200":
          description: Returns a informative message
          content:
            application/json:
              schema:
                type: string
        
        "400":
          description: Bad request (ID is not a number)

        "404":
          description: Availability not found


  /availability/bycicle/{bycicleId}:
    get:
      summary: Get the availability for this bycicle
      tags:
        - Availability

      parameters:
        - name: bycicleId
          in: path
          description: The bycicle ID
          required: true
          schema:
            type: string
      
      responses:
        "200":
          description: Returns the availabilities for this bycicle
          content:
            application/json:
              schema:
                type: string
        
        "400":
          description: Bad request (ID is not a number)

        "404":
          description: There's no availability

  /availability/store/{storeId}:
    get:
      summary: Get a certain availability
      tags:
        - Availability
      parameters:
        - name: storeId
          in: path
          description: The store ID
          required: true
          schema:
            type: string

      
      responses:
        "200":
          description: Returns the availability
          content:
            application/json:
              schema:
                type: string
        
        "400":
          description: Bad request (ID is not a number)

        "404":
          description: There's no availability
  
  /availability/register:
    post:
      summary: Register a new availability
      tags:
        - Availability
      requestBody:
        description: Register a new availability, but bycicleId and storeId must be unique in composition
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Availability"
            example:
              bycicleId: 1
              storeId: 2
              stock: 10
      responses:
        "201":
          description: 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Availability"
        "400":
          description: Bad request

  /availability/{bycicleId}/{storeId}/{stock}:
    put:
      summary: Update the stock of an existing availability
      tags:
        - Availability
      parameters:
        - name: bycicleId
          in: path
          description: The bycicle ID
          required: true
          schema:
            type: string

        - name: storeId
          in: path
          description: The store ID
          required: true
          schema:
            type: string
        
        - name: stock
          in: path
          description: The stock
          required: true
          schema:
            type: integer
        
      requestBody:
        description: Modify the stock of a certain availability
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Availability"
            example:
              bycicleId: 1
              storeId: 1
              stock: 10

      responses:
        "200":
          description: Message telling that the availability has been updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Availability"
        "404":
          description: Availability not found
  
  /booking:
    get:
      summary: Get all the bookings
      tags:
        - Booking
      
      responses:
        "200":
          description: Returns all the bookings
          content:
            application/json:
              schema:
                type: string

        "404":
          description: There's no availability  
  
  /booking/{publicId}:
    get:
      summary: Get a specific booking
      tags:
        - Booking
      
      responses:
        "200":
          description: Returns all the bookings
          content:
            application/json:
              schema:
                type: string

        "400":
          description: Bad request (ID too long or too short)

        "404":
          description: Booking not found

  /booking/register:
    post:
      summary: Register a new booking
      tags:
        - Booking
      requestBody:
        description: Register a new booking depending on the stock of the availability of the bycicle
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Booking"
            example:
              name: John
              surname: Wick
              email: johnwickrocks@gmail.com
              phoneNumber: "+34 657 883 923"
              bycicleId: 1
              storeId: 1
              startDate: "2023-10-01"
              endDate: "2023-10-03"
              total: 143.85

      responses:
        "201":
          description: Returns the new booking
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        "400":
          description: Bad request, could be because the dates are not correct

        "404":
          description: Availability not found

  /booking/cancel/{publicId}:
    post:
      summary: Cancel a booking
      tags:
        - Booking
      parameters:
        - name: publicId
          in: path
          description: The public ID
          required: true
          schema:
            type: string
      
      responses:
        "200":
          description: Returns the canceled booking
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        "400":
          description: Bad request (ID too long or too short)

        "404":
          description: Booking not found

  /booking/update/{publicId}:
    put:
      summary: Update a booking
      tags:
        - Booking
      parameters:
        - name: publicId
          in: path
          description: The public ID
          required: true
          schema:
            type: string
      
      requestBody:
        description: Update dates of a booking
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Booking"
            example:
              startDate: "2023-10-01"
              endDate: "2023-10-03"

      responses:
        "200":
          description: Returns the updated booking
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        "400":
          description: Bad request (ID too long or too short)

        "404":
          description: Booking not found

components:
  schemas:
    Bycicle:
      type: object
      required:
        - category
        - brand
        - weight
        - frame
        - fork
        - wheelSize
        - brakes
        - driveTrain
        - seatpost
        - storeId

      properties:
        category:
          type: string
          description: Category of the bike

        brand:
          type: string
          description: Name of the bike's brand

        weight:
          type: float
          description: Weight of the bike in kg

        frame:
          type: string
          description: Frame of the bike

        suspension:
          description: Suspension of the bike
          oneOf:
            - type: string
            - type: "null"

        fork:
          type: string
          description: Fork of the bike
        
        wheels:
          description: Wheels of the bike
          oneOf: 
            - type: string
            - type: "null"
        
        wheelSize:
          type: integer
          description: Wheel size of the bike
        
        brakes:
          type: string
          description: Brakes of the bike
        
        groupSet:
          description: Groupset of the bike
          oneOf:
            - type: string
            - type: "null"

        driveTrain:
          type: string
          description: Drivetrain of the bike
        
        frontTravel:
          description: Front travel of the bike
          oneOf:
            - type: integer
            - type: "null"
        
        seatpost:
          type: string
          description: Seatpost of the bike
        
        storeId:
          type: integer
          description: ID of the store where the bike is located

    Booking:
      type: object
      required:
        - name
        - surname
        - phoneNumber
        - bycicleId
        - storeId
        - startDate
        - endDate
        - total

      properties:
        name:
          type: string
          description: Name of the client

        surname:
          type: string
          description: Surname of the client

        email:
          type: string
          description: Email of the client
        
        phoneNumber:
          type: string
          description: Phone of the client

        bycicleId:
          type: integer
          description: ID of the bycicle that is rented

        storeId:
          type: integer
          description: ID of the store where the bycicle belongs

        startDate:
          type: string
          description: Day and hour where the booking starts

        endDate:
          type: string
          description: Day and hour where the booking ends

        publicId:
          type: string
          description: Public identifier for the booking, is automatically genered

        isActive:
          type: boolean
          description: True if the booking is active, false if it's not

        canceled:
          type: boolean
          description: True if the booking is canceled

        total:
          type: integer
          description: Total price payed for the booking

    Availability:
      type: object
      required:
        - storeId
        - bycicleId
        - stock

      properties:
        storeId:
          type: integer
          description: ID of the store
        
        bycicleId:
          type: integer
          description: ID of the bycicle

        stock:
          type: integer
          description: How many bycicles of the model (bycicleId) are availiable in the store (storeId)

    Store:
      type: object
      required:
        - storeName
        - address
        - city
        - country
        - phoneNumber
        - email

      properties:
        storeName:
          type: string
          description: Name of the store

        address:
          type: string
          description: Address of the store
        
        city:
          type: string
          description: City of the store
        
        country:
          type: string
          description: Country of the store
        
        phoneNumber:
          type: string
          description: Phone of the store
        
        email:
          type: string
          description: Email of the store
        
        website:
          description: Website of the store
          oneOf:
            - type: string
            - type: "null"